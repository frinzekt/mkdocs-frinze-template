{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs Frinze Template \u00b6 This is my template that I have created while I was working for a cool workplaces namely Lotterywest and UWA System Health Lab . This is a template that contains extensions that are very nice to have when you just want a standard documentation for anything! For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation. How easy is this to deploy? \u00b6 Fork / Clone This Repo Follow the installation Delete the markdown files here and replace it with your own Maybe put your own Nav in the mkdocs.yml file Deploy somewhere ! (easist way Github Pages see here ) What inspired me to do this? \u00b6 I have seen that a lot of the documentation is really scattered for Mkdocs. Like the documentation is good and there are a lot of them, but all I really wanted was a generic template with most of the extensions that I will need without being caught up on which one to pick, and so on; so, I ended up creating this which aims to give you a very easy way to start your documentation. In addition, there was some hussle sometimes, in trying to figure out why some extensions aren't working, and it is just frustrating and time-consuming. Just erase those markdown files in the /docs file, and you can get started. Installation \u00b6 Install this preferably in your global environment because this is just a code generator and so. 1 pip install -r requirements.txt Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Overview"},{"location":"#welcome-to-mkdocs-frinze-template","text":"This is my template that I have created while I was working for a cool workplaces namely Lotterywest and UWA System Health Lab . This is a template that contains extensions that are very nice to have when you just want a standard documentation for anything! For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation.","title":"Welcome to MkDocs Frinze Template"},{"location":"#how-easy-is-this-to-deploy","text":"Fork / Clone This Repo Follow the installation Delete the markdown files here and replace it with your own Maybe put your own Nav in the mkdocs.yml file Deploy somewhere ! (easist way Github Pages see here )","title":"How easy is this to deploy?"},{"location":"#what-inspired-me-to-do-this","text":"I have seen that a lot of the documentation is really scattered for Mkdocs. Like the documentation is good and there are a lot of them, but all I really wanted was a generic template with most of the extensions that I will need without being caught up on which one to pick, and so on; so, I ended up creating this which aims to give you a very easy way to start your documentation. In addition, there was some hussle sometimes, in trying to figure out why some extensions aren't working, and it is just frustrating and time-consuming. Just erase those markdown files in the /docs file, and you can get started.","title":"What inspired me to do this?"},{"location":"#installation","text":"Install this preferably in your global environment because this is just a code generator and so. 1 pip install -r requirements.txt","title":"Installation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"extensions/","text":"Extensions Installed Overview \u00b6 This is a VERY VERY small overview to what you can do with this. I will just highlight some of them, because those are the only documentation syntax that I commonly use and usually remember. Admonitions \u00b6 These are kind of those fancy boxes that you usually in cool Science Books that adds extra information. Note As you can see this box, is very attractive. The syntax for this is: 1 2 !!! note As you can see this box, is very attractive. What If You want a different Title The syntax for this is: 1 2 !!! note \"What If You want a different Title\" As you can see this box, is very attractive. Icons \u00b6 More info here You can also change these icons by changing the first word after !!! or ??? . note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Collapsible Block \u00b6 More info here If things are getting a little bit crowded, why not make some of them collapsible? Example of a More Complex Documentation Here is the basic idea of bubble sort! 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] The Syntax for the Example Above 1 2 3 4 5 6 7 8 9 ??? Example \"Example of a More Complex Documentation\" Here is the basic idea of bubble sort! ```python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Code Highlight \u00b6 This is powered by codehilite. Whenever, you need code, this is the one that makes it pretty. For example: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Highlight Specific Code Lines \u00b6 What if I want to show some cool lines? I could highlight which specific line number should be highlighted. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Latex / Math Symbol Renderer \u00b6 This is for math nerds that needs some Maths in their documentation. More info on Latex here . For example, the Pythagoras Theorem $$ a^2 + b^2 = c^2 $$ Syntax of the Example Above 1 $$ a^ 2 + b^ 2 = c^ 2 $$ Inline Latex \u00b6 According to the results with the p-value \\(p < 0.05\\) , it means that we will reject the null Hypothesis \\(H_0\\) , and that there is a significant difference in the means. Footnotes \u00b6 Woah woah woah! Getting a little bit nerdy referencer here! \"You can tell that I don't know much about referencing\" 1 . If you click this shiny number, it takes you to the bottom of the page where the reference is. Syntax of the Example Above 1 2 3 4 \"You can tell that I don't know much about referencing\"[^1] [^1]: Book of Wisdom - John Doe Content Tabs \u00b6 Very useful for when you need one or the other. For example, when dealing with multiple programming languages. C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Syntax of Above 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Icons and Emoji \u00b6 Just worth mentioning, not too sure if you're going to use it. \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/octoface-16.svg Syntax of Above 1 2 3 - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg` Images \u00b6 Can be done with Markdown or HTML. Image Captioning \u00b6 The Logo that Daphne from Coders for Causes gave me Syntax of Above 1 2 3 4 < figure > < img src = \"../images/docs.png\" width = \"100\" /> < figcaption > The Logo that Daphne from Coders for Causes gave me </ figcaption > </ figure > Image Alignment \u00b6 This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say left or right . Now Let me just fill this with some random words so that the image doesn't look to weird. Syntax Above 1 2 3 ![Placeholder](https://dummyimage.com/600x400/f5f5f5/aaaaaa&text=\u2013%20Image%20\u2013){: align=left width=300 } This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say `left` or `right`. Now Let me just fill this with some random words so that the image doesn't look to weird. Graph In Markdown / Mermaid Markdown \u00b6 More Information here . What if you really just want to create some fancy graphs, but you really can't be bothered to: Load some other software Draw this graph that you wanted to show Save this graph that you want to show Upload this graph somewhere Link this image back to this documentation Like there are just soooo many steps. Introducing mermaid markdown . graph TD A --> B & C B --> C Syntax for Above 1 2 3 4 5 ```mermaid graph TD A --> B & C B --> C ``` How about more complex ones? Is this complex enough for your graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Syntax for Above 1 2 3 4 5 6 7 ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` Some Examples of Other Charts \u00b6 Sequence Diagram \u00b6 Result sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 ```mermaid sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Gantt Chart \u00b6 Result gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Syntax 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ``` Class Diagram \u00b6 Result classDiagram Class01 < |-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 < --> C2: Cool label Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Book of Wisdom - John Doe \u21a9","title":"Extensions Installed Overview"},{"location":"extensions/#extensions-installed-overview","text":"This is a VERY VERY small overview to what you can do with this. I will just highlight some of them, because those are the only documentation syntax that I commonly use and usually remember.","title":"Extensions Installed Overview"},{"location":"extensions/#admonitions","text":"These are kind of those fancy boxes that you usually in cool Science Books that adds extra information. Note As you can see this box, is very attractive. The syntax for this is: 1 2 !!! note As you can see this box, is very attractive. What If You want a different Title The syntax for this is: 1 2 !!! note \"What If You want a different Title\" As you can see this box, is very attractive.","title":"Admonitions"},{"location":"extensions/#icons","text":"More info here You can also change these icons by changing the first word after !!! or ??? . note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Icons"},{"location":"extensions/#collapsible-block","text":"More info here If things are getting a little bit crowded, why not make some of them collapsible? Example of a More Complex Documentation Here is the basic idea of bubble sort! 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] The Syntax for the Example Above 1 2 3 4 5 6 7 8 9 ??? Example \"Example of a More Complex Documentation\" Here is the basic idea of bubble sort! ```python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ```","title":"Collapsible Block"},{"location":"extensions/#code-highlight","text":"This is powered by codehilite. Whenever, you need code, this is the one that makes it pretty. For example: 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ```","title":"Code Highlight"},{"location":"extensions/#highlight-specific-code-lines","text":"What if I want to show some cool lines? I could highlight which specific line number should be highlighted. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Syntax of the Example Above 1 2 3 4 5 6 7 ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ```","title":"Highlight Specific Code Lines"},{"location":"extensions/#latex-math-symbol-renderer","text":"This is for math nerds that needs some Maths in their documentation. More info on Latex here . For example, the Pythagoras Theorem $$ a^2 + b^2 = c^2 $$ Syntax of the Example Above 1 $$ a^ 2 + b^ 2 = c^ 2 $$","title":"Latex / Math Symbol Renderer"},{"location":"extensions/#inline-latex","text":"According to the results with the p-value \\(p < 0.05\\) , it means that we will reject the null Hypothesis \\(H_0\\) , and that there is a significant difference in the means.","title":"Inline Latex"},{"location":"extensions/#footnotes","text":"Woah woah woah! Getting a little bit nerdy referencer here! \"You can tell that I don't know much about referencing\" 1 . If you click this shiny number, it takes you to the bottom of the page where the reference is. Syntax of the Example Above 1 2 3 4 \"You can tell that I don't know much about referencing\"[^1] [^1]: Book of Wisdom - John Doe","title":"Footnotes"},{"location":"extensions/#content-tabs","text":"Very useful for when you need one or the other. For example, when dealing with multiple programming languages. C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Syntax of Above 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ```","title":"Content Tabs"},{"location":"extensions/#icons-and-emoji","text":"Just worth mentioning, not too sure if you're going to use it. \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/octoface-16.svg Syntax of Above 1 2 3 - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg`","title":"Icons and Emoji"},{"location":"extensions/#images","text":"Can be done with Markdown or HTML.","title":"Images"},{"location":"extensions/#image-captioning","text":"The Logo that Daphne from Coders for Causes gave me Syntax of Above 1 2 3 4 < figure > < img src = \"../images/docs.png\" width = \"100\" /> < figcaption > The Logo that Daphne from Coders for Causes gave me </ figcaption > </ figure >","title":"Image Captioning"},{"location":"extensions/#image-alignment","text":"This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say left or right . Now Let me just fill this with some random words so that the image doesn't look to weird. Syntax Above 1 2 3 ![Placeholder](https://dummyimage.com/600x400/f5f5f5/aaaaaa&text=\u2013%20Image%20\u2013){: align=left width=300 } This is for when you have paragraphs and some text, but you really wanted those fancy images on the side. You can either say `left` or `right`. Now Let me just fill this with some random words so that the image doesn't look to weird.","title":"Image Alignment"},{"location":"extensions/#graph-in-markdown-mermaid-markdown","text":"More Information here . What if you really just want to create some fancy graphs, but you really can't be bothered to: Load some other software Draw this graph that you wanted to show Save this graph that you want to show Upload this graph somewhere Link this image back to this documentation Like there are just soooo many steps. Introducing mermaid markdown . graph TD A --> B & C B --> C Syntax for Above 1 2 3 4 5 ```mermaid graph TD A --> B & C B --> C ``` How about more complex ones? Is this complex enough for your graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Syntax for Above 1 2 3 4 5 6 7 ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ```","title":"Graph In Markdown / Mermaid Markdown"},{"location":"extensions/#some-examples-of-other-charts","text":"","title":"Some Examples of Other Charts"},{"location":"extensions/#sequence-diagram","text":"Result sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 ```mermaid sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ```","title":"Sequence Diagram"},{"location":"extensions/#gantt-chart","text":"Result gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Syntax 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d ```","title":"Gantt Chart"},{"location":"extensions/#class-diagram","text":"Result classDiagram Class01 < |-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 < --> C2: Cool label Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 <--> C2: Cool label ``` Book of Wisdom - John Doe \u21a9","title":"Class Diagram"}]}